const eth = require("ethereumjs-util");
const rlp = require("rlp");
const Web3 = require("web3");
const abiCoder = require("web3-eth-abi");
const { ethers } = require("hardhat");

/** @var web3 {Web3} */

const SIMPLE_TOKEN_TEMPLATE_BYTECODE =
  "0x608060405234801561001057600080fd5b50610a7f806100206000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c80638da5cb5b11610097578063a457c2d711610066578063a457c2d714610224578063a9059cbb14610237578063dd62ed3e1461024a578063df1f29ee1461028357600080fd5b80638da5cb5b146101cb57806394bfed88146101f657806395d89b41146102095780639dc29fac1461021157600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a57806340c10f191461018d57806370a08231146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d6102a6565b60405161011a919061095e565b60405180910390f35b6101366101313660046108f5565b6102b8565b604051901515815260200161011a565b6005545b60405190815260200161011a565b6101366101663660046108b9565b6102d0565b6040516012815260200161011a565b6101366101883660046108f5565b6102f6565b6101a061019b3660046108f5565b610305565b005b61014a6101b0366004610864565b6001600160a01b031660009081526003602052604090205490565b6002546101de906001600160a01b031681565b6040516001600160a01b03909116815260200161011a565b6101a061020436600461091f565b6103b9565b61010d61040a565b6101a061021f3660046108f5565b610417565b6101366102323660046108f5565b6104c5565b6101366102453660046108f5565b6104d4565b61014a610258366004610886565b6001600160a01b03918216600090815260046020908152604080832093909416825291909152205490565b600654600754604080519283526001600160a01b0390911660208301520161011a565b60606102b36001546104e3565b905090565b60006102c733848460016105b9565b50600192915050565b60006102df8484846001610661565b6102ec843384600161072c565b5060019392505050565b60006102c733848460016107eb565b6002546001600160a01b0316331461031c57600080fd5b6001600160a01b03821661032f57600080fd5b806005600082825461034191906109b3565b90915550506001600160a01b0382166000908152600360205260408120805483929061036e9084906109b3565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a35050565b6002546001600160a01b0316156103cf57600080fd5b60028054336001600160a01b031991821617909155600094909455600192909255600655600780549092166001600160a01b03909116179055565b60606102b36000546104e3565b6002546001600160a01b0316331461042e57600080fd5b6001600160a01b03821661044157600080fd5b6001600160a01b038216600090815260036020526040812080548392906104699084906109f0565b92505081905550806005600082825461048291906109f0565b90915550506040518181526000906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016103ad565b60006102c7338484600161072c565b60006102c73384846001610661565b6060816104fe57505060408051600081526020810190915290565b600060105b60ff811615610555578361051782846109cb565b60ff166020811061052a5761052a610a1d565b1a60f81b6001600160f81b0319161561054a5761054781836109cb565b91505b60011c607f16610503565b5060006105638260016109cb565b60ff1667ffffffffffffffff81111561057e5761057e610a33565b6040519080825280601f01601f1916602001820160405280156105a8576020820181803683370190505b506020810194909452509192915050565b6001600160a01b0384166105cc57600080fd5b6001600160a01b0383166105df57600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905220829055801561065b57826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161065291815260200190565b60405180910390a35b50505050565b6001600160a01b03841661067457600080fd5b6001600160a01b03831661068757600080fd5b6001600160a01b038416600090815260036020526040812080548492906106af9084906109f0565b90915550506001600160a01b038316600090815260036020526040812080548492906106dc9084906109b3565b9091555050801561065b57826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161065291815260200190565b6001600160a01b03841661073f57600080fd5b6001600160a01b03831661075257600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905290812080548492906107899084906109f0565b9091555050801561065b576001600160a01b038481166000818152600460209081526040808320948816808452948252918290205491519182527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259101610652565b6001600160a01b0384166107fe57600080fd5b6001600160a01b03831661081157600080fd5b6001600160a01b038085166000908152600460209081526040808320938716835292905290812080548492906107899084906109b3565b80356001600160a01b038116811461085f57600080fd5b919050565b60006020828403121561087657600080fd5b61087f82610848565b9392505050565b6000806040838503121561089957600080fd5b6108a283610848565b91506108b060208401610848565b90509250929050565b6000806000606084860312156108ce57600080fd5b6108d784610848565b92506108e560208501610848565b9150604084013590509250925092565b6000806040838503121561090857600080fd5b61091183610848565b946020939093013593505050565b6000806000806080858703121561093557600080fd5b84359350602085013592506040850135915061095360608601610848565b905092959194509250565b600060208083528351808285015260005b8181101561098b5785810183015185820160400152820161096f565b8181111561099d576000604083870101525b50601f01601f1916929092016040019392505050565b600082198211156109c6576109c6610a07565b500190565b600060ff821660ff84168060ff038211156109e8576109e8610a07565b019392505050565b600082821015610a0257610a02610a07565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220fe9609dd4d099f8ee61d515b2ebf66a53d24e78cf669be48b69b627acefde71564736f6c63430008060033";
const SIMPLE_TOKEN_PROXY_BYTECODE =
  "0x608060405234801561001057600080fd5b50610215806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d42afb56146100fd575b60008061005960017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b60001b9050805491506000826001600160a01b031663709bc7f36040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d79190610185565b90503660008037600080366000845af43d6000803e8080156100f8573d6000f35b3d6000fd5b61011061010b366004610161565b610112565b005b60008061014060017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b8054925090506001600160a01b0382161561015a57600080fd5b9190915550565b60006020828403121561017357600080fd5b813561017e816101c7565b9392505050565b60006020828403121561019757600080fd5b815161017e816101c7565b6000828210156101c257634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146101dc57600080fd5b5056fea2646970667358221220e6ae4b3dc2474e43ff609e19eb520ce54b6f38170a43a6f96541360be5efc2b464736f6c63430008060033";
const INTERNET_BOND_PROXY_BYTECODE =
  "0x608060405234801561001057600080fd5b50610215806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063d42afb56146100fd575b60008061005960017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b60001b9050805491506000826001600160a01b0316631626425c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561009f57600080fd5b505af11580156100b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906100d79190610185565b90503660008037600080366000845af43d6000803e8080156100f8573d6000f35b3d6000fd5b61011061010b366004610161565b610112565b005b60008061014060017fa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d516101a2565b8054925090506001600160a01b0382161561015a57600080fd5b9190915550565b60006020828403121561017357600080fd5b813561017e816101c7565b9392505050565b60006020828403121561019757600080fd5b815161017e816101c7565b6000828210156101c257634e487b7160e01b600052601160045260246000fd5b500390565b6001600160a01b03811681146101dc57600080fd5b5056fea2646970667358221220d283edebb1e56b63c1cf809c7a7219bbf056c367c289dabb51fdba5f71cdf44c64736f6c63430008060033";

function nameAndSymbolByNetwork(networkName) {
  const networks = {
    // BSC
    smartchaintestnet: { name: "BNB", symbol: "BNB" },
    smartchain: { name: "BNB", symbol: "BNB" },
    // ETH
    goerli: { name: "Ethereum", symbol: "ETH" },
    mainnet: { name: "Ethereum", symbol: "ETH" },
    // polygon
    polygontestnet: { name: "Matic Token", symbol: "MATIC" },
    polygon: { name: "Matic Token", symbol: "MATIC" },
    // unit tests
    test: { name: "Ethereum", symbol: "ETH" },
    soliditycoverage: { name: "Ethereum", symbol: "ETH" },
    ganache: { name: "Ethereum", symbol: "ETH" },
  };
  if (!networks[networkName]) throw new Error(`Unknown network ${networkName}`);
  return networks[networkName];
}

function nativeAddressByNetwork(networkName) {
  function nativeHash(str) {
    return "0x" + eth.keccak256(Buffer.from(str, "utf8")).slice(0, 20).toString("hex");
  }
  const { symbol } = nameAndSymbolByNetwork(networkName);

  return nativeHash(`CrossChainBridge:${symbol}`);
}

function simpleTokenTemplateAddress(deployer) {
  if (deployer.startsWith("0x")) {
    deployer = deployer.substr(2);
  }
  let salt = eth.keccak256(Buffer.from("SimpleTokenTemplateV1", "utf8")).toString("hex");
  if (salt.startsWith("0x")) {
    salt = salt.substr(2);
  }
  const byteCodeHash = eth.keccak256(eth.toBuffer(SIMPLE_TOKEN_TEMPLATE_BYTECODE));
  const newAddress = eth.keccak256(eth.toBuffer(["0xff", deployer, web3.utils.padRight(salt, 64), byteCodeHash.toString("hex")].join("")));
  return `0x${newAddress.toString("hex").substr(24)}`;
}

function simpleTokenProxyAddress(deployer, salt) {
  if (deployer.startsWith("0x")) {
    deployer = deployer.substr(2);
  }
  if (salt.startsWith("0x")) {
    salt = salt.substr(2);
  }
  const byteCodeSources = SIMPLE_TOKEN_PROXY_BYTECODE;
  // let constructor = web3.eth.abi.encodeParameters(['address'], ['0x0000000000000000000000000000000000000000']);
  // if (constructor.startsWith('0x')) {
  //   constructor = constructor.substr(2);
  // }
  const byteCodeHash = eth.keccak256(eth.toBuffer(byteCodeSources));
  const newAddress = eth.keccak256(eth.toBuffer(["0xff", deployer, Web3.utils.padRight(salt, 64), byteCodeHash.toString("hex")].join("")));
  return `0x${newAddress.toString("hex").substr(24)}`;
}

function internetBondProxyAddress(deployer, salt) {
  if (deployer.startsWith("0x")) {
    deployer = deployer.substr(2);
  }
  if (salt.startsWith("0x")) {
    salt = salt.substr(2);
  }
  const byteCodeSources = INTERNET_BOND_PROXY_BYTECODE;
  // let constructor = web3.eth.abi.encodeParameters(['address'], ['0x0000000000000000000000000000000000000000']);
  // if (constructor.startsWith('0x')) {
  //   constructor = constructor.substr(2);
  // }
  const byteCodeHash = eth.keccak256(eth.toBuffer(byteCodeSources));
  const newAddress = eth.keccak256(eth.toBuffer(["0xff", deployer, web3.utils.padRight(salt, 64), byteCodeHash.toString("hex")].join("")));
  return `0x${newAddress.toString("hex").substr(24)}`;
}

function createSimpleTokenMetaData(symbol, name, chain, origin) {
  return [
    abiCoder.encodeParameters(["bytes32"], [Web3.utils.asciiToHex(symbol)]),
    abiCoder.encodeParameters(["bytes32"], [Web3.utils.asciiToHex(name)]),
    chain,
    origin,
    "0x0000000000000000000000000000000000000000000000000000000000000000",
  ];
}

function createInternetBondMetaData(symbol, name, chain, origin, rebasing) {
  if (rebasing === undefined) rebasing = true;
  return [
    web3.eth.abi.encodeParameter("bytes32", web3.utils.asciiToHex(symbol)),
    web3.eth.abi.encodeParameter("bytes32", web3.utils.asciiToHex(name)),
    chain,
    origin,
    rebasing
      ? "0x0001000000000000000000000000000000000000000000000000000000000000"
      : "0x0002000000000000000000000000000000000000000000000000000000000000",
  ];
}

function encodeTransactionReceipt(txReceipt) {
  const rlpLogs = txReceipt.logs.map((log) => {
    return [
      // address
      log.address,
      // topics
      log.topics,
      // data
      Buffer.from(log.data.substr(2), "hex"),
    ];
  });
  const rlpReceipt = [
    // postStateOrStatus
    Web3.utils.numberToHex(Number(txReceipt.status)),
    // cumulativeGasUsed
    Web3.utils.numberToHex(txReceipt.cumulativeGasUsed.toString()),
    // bloom
    //txReceipt.logsBloom,
    // logs
    rlpLogs,
  ];
  const encodedReceipt = rlp.encode(rlpReceipt);
  const receiptHash = eth.keccak256(encodedReceipt);
  return [`0x${encodedReceipt.toString("hex")}`, `0x${receiptHash.toString("hex")}`];
}

function encodeTransactionReceiptInvalidContractAddress(txReceipt) {
  const rlpLogs = txReceipt.logs.map((log) => {
    return [
      // address
      log.address,
      // topics
      log.topics,
      // data
      Buffer.from(log.data.substr(2), "hex"),
    ];
  });
  rlpLogs[1][0] = ethers.ZeroAddress;
  const rlpReceipt = [
    // postStateOrStatus
    Web3.utils.numberToHex(Number(txReceipt.status)),
    // cumulativeGasUsed
    Web3.utils.numberToHex(txReceipt.cumulativeGasUsed.toString()),
    // bloom
    //txReceipt.logsBloom,
    // logs
    rlpLogs,
  ];
  const encodedReceipt = rlp.encode(rlpReceipt);
  const receiptHash = eth.keccak256(encodedReceipt);
  return [`0x${encodedReceipt.toString("hex")}`, `0x${receiptHash.toString("hex")}`];
}

function encodeTransactionReceiptInvalidFromTokenAddress(txReceipt, data) {
  const rlpLogs = txReceipt.logs.map((log) => {
    return [
      // address
      log.address,
      // topics
      log.topics,
      // data
      Buffer.from(log.data.substr(2), "hex"),
    ];
  });
  rlpLogs[1][2] = Buffer.from(data.substr(2), "hex");
  const rlpReceipt = [
    // postStateOrStatus
    Web3.utils.numberToHex(Number(txReceipt.status)),
    // cumulativeGasUsed
    Web3.utils.numberToHex(txReceipt.cumulativeGasUsed.toString()),
    // bloom
    //txReceipt.logsBloom,
    // logs
    rlpLogs,
  ];
  const encodedReceipt = rlp.encode(rlpReceipt);
  const receiptHash = eth.keccak256(encodedReceipt);
  return [`0x${encodedReceipt.toString("hex")}`, `0x${receiptHash.toString("hex")}`];
}

function encodeProof(chainId, status, txHash, blockNumber, blockHash, txIndex, receiptHash, amount) {
  const proofData = Buffer.concat([
    Buffer.from(abiCoder.encodeParameters(["uint256", "uint256"], [chainId, status]).substr(2), "hex"),
    Buffer.from(txHash.substr(2), "hex"),
    Buffer.from(abiCoder.encodeParameters(["uint256"], [blockNumber]).substr(2), "hex"),
    Buffer.from(blockHash.substr(2), "hex"),
    Buffer.from(abiCoder.encodeParameters(["uint256"], [txIndex]).substr(2), "hex"),
    Buffer.from(receiptHash.substr(2), "hex"),
    Buffer.from(amount.substr(2), "hex"),
  ]);

  return [`0x${proofData.toString("hex")}`, `0x${eth.keccak256(proofData).toString("hex")}`];
}

function randBigInt(length) {
  if (length > 0) {
    let randomNum = "";
    randomNum += Math.floor(Math.random() * 9) + 1; // generates a random digit 1-9
    for (let i = 0; i < length - 1; i++) {
      randomNum += Math.floor(Math.random() * 10); // generates a random digit 0-9
    }
    return BigInt(randomNum);
  } else {
    return 0n;
  }
}

module.exports = {
  createSimpleTokenMetaData,
  createInternetBondMetaData,
  nameAndSymbolByNetwork,
  nativeAddressByNetwork,
  simpleTokenProxyAddress,
  internetBondProxyAddress,
  encodeTransactionReceiptInvalidContractAddress,
  encodeTransactionReceiptInvalidFromTokenAddress,
  encodeTransactionReceipt,
  encodeProof,
  randBigInt,
};
